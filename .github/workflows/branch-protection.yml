name: Branch Protection Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  enforce-branch-protection:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Block Direct Push to Main
        run: |
          echo "❌ Direct pushes to main branch are not allowed!"
          echo "Please create a feature branch and submit a pull request."
          exit 1

  validate-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate PR
        run: |
          echo "✅ Pull request validation passed"
          echo "PR from: ${{ github.head_ref }}"
          echo "PR to: ${{ github.base_ref }}"
          
      - name: Check for required files
        run: |
          if [ ! -f "README.md" ]; then
            echo "❌ README.md is required"
            exit 1
          fi
          if [ ! -f "CONTRIBUTING.md" ]; then
            echo "❌ CONTRIBUTING.md is required"  
            exit 1
          fi
          echo "✅ Required files present"

  build-and-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            build-essential \
            libgdal-dev \
            gdal-bin \
            libjson-c-dev \
            libcurl4-openssl-dev \
            zlib1g-dev \
            pkg-config
          
      - name: Verify GDAL installation
        run: |
          gdal-config --version
          gdal-config --prefix
          gdal-config --cflags
          gdal-config --libs
          pkg-config --modversion gdal || echo "pkg-config for gdal not available"
          
      - name: Build project
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_VERBOSE_MAKEFILE=ON
          make VERBOSE=1
          
      - name: Verify build outputs
        run: |
          cd build
          ls -la
          file gdal_EOPFZarr.* || echo "Plugin file not found"
          
      - name: Run tests
        run: |
          cd build
          # Check if test executables exist
          if [ -f test_eopf_driver ]; then
            echo "Running unit tests..."
            ./test_eopf_driver
          else
            echo "No test executables found, skipping tests"
          fi
          
      - name: Test plugin loading
        run: |
          cd build
          # Set plugin path and test if GDAL can load the driver
          export GDAL_DRIVER_PATH="$(pwd):$GDAL_DRIVER_PATH"
          echo "Testing plugin loading..."
          gdalinfo --formats | grep -i eopf || echo "EOPF driver not found in formats list"
