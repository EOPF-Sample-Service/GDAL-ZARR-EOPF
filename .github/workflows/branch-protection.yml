name: Branch Protection Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  enforce-branch-protection:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Block Direct Push to Main
        run: |
          echo "❌ Direct pushes to main branch are not allowed!"
          echo "Please create a feature branch and submit a pull request."
          exit 1

  validate-pr:
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate PR
        run: |
          echo "✅ Pull request validation passed"
          echo "PR from: ${{ github.head_ref }}"
          echo "PR to: ${{ github.base_ref }}"
          
      - name: Check for required files
        run: |
          if [ ! -f "README.md" ]; then
            echo "❌ README.md is required"
            exit 1
          fi
          if [ ! -f "CONTRIBUTING.md" ]; then
            echo "❌ CONTRIBUTING.md is required"  
            exit 1
          fi
          echo "✅ Required files present"

  build-and-test:
    runs-on: ubuntu-22.04  # Use same Ubuntu version as main.yml
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            cmake \
            build-essential \
            libgdal-dev \
            gdal-bin \
            ninja-build
          
      - name: Verify GDAL installation
        run: |
          echo "GDAL version information:"
          gdal-config --version
          echo "GDAL include path:"
          gdal-config --cflags
          echo "GDAL library path:"
          gdal-config --libs
          echo "GDAL_VERSION_NUM from header:"
          echo '#include "gdal_version.h"' | cpp -I$(gdal-config --cflags | sed 's/-I//g') - | grep 'define GDAL_VERSION_NUM' || echo "Could not find GDAL_VERSION_NUM"
          
      - name: Build project
        run: |
          cmake -S . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_VERBOSE_MAKEFILE=ON
          cmake --build build --parallel
          
      - name: Verify build outputs
        run: |
          ls -la build/
          file build/gdal_EOPFZarr.* || echo "Plugin file not found"
          
      - name: Run tests
        run: |
          # Check if test executables exist
          if [ -f build/test_eopf_driver ]; then
            echo "Running unit tests..."
            ./build/test_eopf_driver
          else
            echo "No test executables found, skipping tests"
          fi
          
      - name: Test plugin loading
        run: |
          # Set plugin path and test if GDAL can load the driver
          export GDAL_DRIVER_PATH="$GITHUB_WORKSPACE/build:$GDAL_DRIVER_PATH"
          echo "Testing plugin loading..."
          timeout 30 gdalinfo --formats > formats_output.txt
          if grep -i "eopf" formats_output.txt; then
            echo "✅ EOPF driver successfully loaded!"
          else
            echo "❌ EOPF driver not found in formats list"
            echo "Available formats:"
            head -20 formats_output.txt
          fi
