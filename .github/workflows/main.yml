name: Build & test EOPFZarr plugin

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  linux-build:
    name: Linux Build
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      matrix:
        cfg: [Debug, Release]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache APT packages
      uses: actions/cache@v3
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('path/to/lockfile') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install GDAL dev packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
             gdal-bin libgdal-dev cmake ninja-build build-essential

    - name: Configure
      run: |
        cmake -S . -B build/${{ matrix.cfg }} \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.cfg }}

    - name: Build
      run: cmake --build build/${{ matrix.cfg }} --parallel


    - name: Smoke test
      run: |
          export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
          echo "Test 1- Checking for EOPFZARR driver in available formats:"
          gdalinfo --formats | grep "EOPFZARR" || echo "EOPFZARR driver not found!"
          # Create a more complete Zarr test dataset
          echo "Testing with sample data from repository:"
          ls -la $GITHUB_WORKSPACE/src/sample_data/
          echo "Test 2- Opening sample Zarr dataset with EOPF_PROCESS=YES:"

          # Use CPL_DEBUG for detailed driver selection info
          export CPL_DEBUG=OFF
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep -i "driver"
      
          # Verify dimensions or other expected properties of your sample data
          echo "Test 3- Verifying dataset properties:"
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep "Size is" || echo "Dataset dimensions not found"

          # Optional: Show a sample of the full output
          echo "Test 4- Sample of dataset info:"
          CPL_LOG_ERRORS=OFF gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | head -n 50

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Get the system GDAL version first
        GDAL_VERSION=$(gdal-config --version)
        echo "System GDAL version: ${GDAL_VERSION}"
        # Install the matching GDAL Python bindings
        pip install gdal==${GDAL_VERSION}
        # Install other requirements but exclude GDAL
        grep -v "gdal" tests/requirements.txt | pip install -r /dev/stdin

    - name: Run Python tests
      run: |
        # Set the driver path so Python tests can find the plugin
        export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        # Run pytest
        cd tests
        pytest -xvs python/

    - name: Debug info
      if: failure()
      run: |
        echo "Listing available GDAL drivers:"
        gdalinfo --formats
        echo "Listing contents of the driver path:"
        ls -la $GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        echo "Listing contents of test Zarr dataset:"
        ls -la /tmp/test.zarr/
        echo "GDAL version information:"
        gdalinfo --version

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gdal_EOPFZarr-${{ matrix.cfg }}
        path: build/${{ matrix.cfg }}/gdal_EOPFZarr.so

  windows-build:
    name: Windows Build
    runs-on: windows-latest
    strategy:
      matrix:
        cfg: [Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Use Conda to install GDAL - much more reliable than OSGeo4W in CI
      - name: Setup Conda with GDAL
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: '3.10'
          channels: conda-forge
          activate-environment: gdal-env

      - name: Install GDAL and build tools with Conda
        shell: bash -el {0}
        run: |
          conda install -y gdal=3.6.2 cmake ninja
          echo "--- Conda Info ---"
          conda info
          echo "--- Conda List ---"
          conda list
          echo "--- gdal-config location ---"
          which gdal-config
          echo "--- gdalinfo version ---"
          gdalinfo --version
          # Set GDAL_DATA and PROJ_LIB, which are often needed by GDAL runtime
          echo "GDAL_DATA=$CONDA_PREFIX/share/gdal" >> $GITHUB_ENV
          echo "PROJ_LIB=$CONDA_PREFIX/share/proj" >> $GITHUB_ENV

      - name: Setup MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure CMake
        shell: bash -el {0}
        run: |
          cmake -S . -B build \
            -G "Ninja" \
            -DCMAKE_BUILD_TYPE=${{ matrix.cfg }} \
            -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
            -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: Build
        shell: bash -el {0}
        run: |
          cmake --build build --config ${{ matrix.cfg }} --parallel


      - name: Collect Dependencies
        shell: bash -el {0}
        run: |
          mkdir -p deps
          # Copy GDAL DLL and its direct dependencies from the conda environment
          # This list might need adjustment based on the exact GDAL version and its deps
          cp "$CONDA_PREFIX/Library/bin/gdal*.dll" deps/ || echo "No GDAL DLLs found"
          cp "$CONDA_PREFIX/Library/bin/proj*.dll" deps/ || echo "No PROJ DLLs found"
          cp "$CONDA_PREFIX/Library/bin/sqlite3.dll" deps/ || echo "No sqlite3.dll found"
          # Add other known direct dependencies of gdal.dll if necessary (e.g., tiff.dll, geotiff.dll, etc.)
          
          # Copy required MSVC runtime DLLs
          cp "$CONDA_PREFIX/Library/bin/vcruntime140.dll" deps/ || echo "vcruntime140.dll not found"
          cp "$CONDA_PREFIX/Library/bin/vcruntime140_1.dll" deps/ 2>/dev/null || echo "vcruntime140_1.dll not found (optional)"
          cp "$CONDA_PREFIX/Library/bin/msvcp140.dll" deps/ || echo "msvcp140.dll not found"
          # Add other msvcp140_*.dll if needed by your build or GDAL's dependencies
          
          echo "--- Collected Dependencies ---"
          ls -la deps/

      - name: Create Bundle
        shell: bash -el {0}
        run: |
          mkdir -p bundle
          cp build/gdal_EOPFZarr.dll bundle/
          # Copy all collected dependencies; avoid error if deps is empty
          cp deps/* bundle/ 2>/dev/null || echo "No dependencies from deps/ to copy"
          
          cat > bundle/README.txt << 'EOL'
          # EOPF Zarr GDAL Plugin (Windows)

          ## Bundle Contents
          This bundle contains gdal_EOPFZarr.dll and its direct dependencies
          from the Conda environment (GDAL 3.6.2).

          ## Installation
          1. Place `gdal_EOPFZarr.dll` into your GDAL plugin directory
             (e.g., `C:\OSGeo4W\apps\gdal\lib\gdalplugins\` or similar for your GDAL installation).
          2. Ensure that the accompanying DLLs (like `gdalXYZ.dll`, `proj_X_Y.dll`, MSVC runtimes)
             are accessible by GDAL. This usually means they should be in the same directory
             as `gdal.exe` / `gdalXYZ.dll` (e.g., `C:\OSGeo4W\bin\`) or in a directory
             that is on the system's PATH *before* other conflicting DLLs.

          ## Troubleshooting
          - **Error 126 (Module Not Found):** A dependency of `gdal_EOPFZarr.dll` or `gdalXYZ.dll` is missing.
            Use a tool like "Dependencies" (depends.exe successor) to inspect `gdal_EOPFZarr.dll`
            in the target environment to identify missing DLLs.
          - Ensure the GDAL version you are using matches the one this plugin was built against (3.6.2).
          EOL
          echo "--- Bundle Contents ---"
          ls -la bundle/

      - name: Test Plugin Loading
        shell: bash -el {0}
        run: |
          export GDAL_DRIVER_PATH="$(pwd)/build"
          echo "--- GDAL_DRIVER_PATH: ${GDAL_DRIVER_PATH} ---"
          echo "--- Testing gdalinfo --formats ---"
          gdalinfo --formats | grep "EOPFZARR" || (echo "EOPFZARR driver not found in gdalinfo --formats!" && exit 1)
          echo "EOPFZARR driver successfully listed."
          
          echo "--- Testing opening sample data ---"
          # Ensure the sample data path is correct and accessible
          gdalinfo -oo EOPF_PROCESS=YES "$GITHUB_WORKSPACE/src/sample_data" | grep -i "Driver: EOPFZARR" || (echo "Failed to open sample data with EOPFZARR or driver not reported as EOPFZARR!" && exit 1)
          echo "Successfully opened sample data with EOPFZARR driver."

      - name: Upload Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gdal_EOPFZarr-${{ matrix.cfg }}-conda-bundle-windows
          path: bundle/*

      - name: Upload Plugin Only Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gdal_EOPFZarr-${{ matrix.cfg }}-plugin-only-windows
          path: build/gdal_EOPFZarr.dll

