name: Build & test EOPFZarr plugin

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  linux-build:
    name: Linux Build
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      matrix:
        cfg: [Debug, Release]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install GDAL dev packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
             gdal-bin libgdal-dev cmake ninja-build build-essential

    - name: Configure
      run: |
        cmake -S . -B build/${{ matrix.cfg }} \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.cfg }}

    - name: Build
      run: cmake --build build/${{ matrix.cfg }} --parallel


    - name: Smoke test
      run: |
          export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
          echo "Test 1- Checking for EOPFZARR driver in available formats:"
          gdalinfo --formats | grep "EOPFZARR" || echo "EOPFZARR driver not found!"
          # Create a more complete Zarr test dataset
          echo "Testing with sample data from repository:"
          ls -la $GITHUB_WORKSPACE/src/sample_data/
          echo "Test 2- Opening sample Zarr dataset with EOPF_PROCESS=YES:"

          # Use CPL_DEBUG for detailed driver selection info
          export CPL_DEBUG=OFF
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep -i "driver"
      
          # Verify dimensions or other expected properties of your sample data
          echo "Test 3- Verifying dataset properties:"
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep "Size is" || echo "Dataset dimensions not found"

          # Optional: Show a sample of the full output
          echo "Test 4- Sample of dataset info:"
          CPL_LOG_ERRORS=OFF gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | head -n 50

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Get the system GDAL version first
        GDAL_VERSION=$(gdal-config --version)
        echo "System GDAL version: ${GDAL_VERSION}"
        # Install the matching GDAL Python bindings
        pip install gdal==${GDAL_VERSION}
        # Install other requirements but exclude GDAL
        grep -v "gdal" tests/requirements.txt | pip install -r /dev/stdin

    - name: Run Python tests
      run: |
        # Set the driver path so Python tests can find the plugin
        export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        # Run pytest
        cd tests
        pytest -xvs python/

    - name: Debug info
      if: failure()
      run: |
        echo "Listing available GDAL drivers:"
        gdalinfo --formats
        echo "Listing contents of the driver path:"
        ls -la $GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        echo "Listing contents of test Zarr dataset:"
        ls -la /tmp/test.zarr/
        echo "GDAL version information:"
        gdalinfo --version

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gdal_EOPFZarr-${{ matrix.cfg }}
        path: build/${{ matrix.cfg }}/gdal_EOPFZarr.so

  windows-build:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install OSGeo4W (GDAL + Dev Tools)
      uses: echoix/setup-OSGeo4W@v0.2.0
      with:
        packages: gdal-devel cmake ninja
        site: https://download.osgeo.org/osgeo4w/v2/
        root: C:\OSGeo4W
        arch: x86_64
        upgrade-also: false

    - name: Setup MSVC 2022
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        vcvars_ver: 14.3

    - name: Build Plugin
      run: |
        cmake -S . -B build `
          -G "Visual Studio 17 2022" `
          -A x64 `
          -DCMAKE_PREFIX_PATH="C:/OSGeo4W;C:/OSGeo4W/apps/gdal" `
          -DGDAL_DIR="C:/OSGeo4W/apps/gdal/lib/cmake/gdal"
        cmake --build build --config Release

    - name: Create Test Zarr Dataset
      run: |
        mkdir -p C:/temp/test.zarr

        echo '{"zarr_format": 2}' > C:/temp/test.zarr/.zgroup
        echo '{"metadata": {".zattrs": {}, ".zgroup": {"zarr_format": 2}}}' > C:/temp/test.zarr/.zmetadata
        
        # Create a simple array
        mkdir -p C:/temp/test.zarr/data
        echo '{"chunks": [10, 10], "compressor": null, "dtype": "<f8", "fill_value": 0, "filters": null, "order": "C", "shape": [20, 30], "zarr_format": 2}' > C:/temp/test.zarr/data/.zarray
        
        dir C:/temp/test.zarr
        dir C:/temp/test.zarr/data
        type C:/temp/test.zarr/.zgroup
        type C:/temp/test.zarr/.zmetadata
        type C:/temp/test.zarr/data/.zarray

    - name: Test Plugin
      run: |
        $env:GDAL_DRIVER_PATH="$PWD/build/Release"
        $env:GDAL_DATA="C:/OSGeo4W/share/gdal"
        $env:PATH="C:/OSGeo4W/bin;$env:PATH"
        
        Write-Host "Test 1- Available GDAL drivers:"
        gdalinfo --formats | findstr "EOPFZARR"
        
        Write-Host "Test 2a- Opening Zarr dataset with default options:"
        gdalinfo C:/temp/test.zarr/ | findstr "Driver"
        
        Write-Host "Test 2b- With EOPF_PROCESS=NO:"
        gdalinfo -oo EOPF_PROCESS=NO C:/temp/test.zarr/ | findstr "Driver"
        
        Write-Host "Test 2c- With EOPF_PROCESS=YES:"
        try {
          gdalinfo -oo EOPF_PROCESS=YES C:/temp/test.zarr/ | findstr "Driver"
        } catch {
          Write-Host "Failed with EOPF_PROCESS=YES, but continuing"
        }
        
        Write-Host "Debug information:"
        gdalinfo --version
        dir $env:GDAL_DRIVER_PATH

    - name: Package Artifacts
      run: |
        mkdir dist
        # Add diagnostic output to verify file location (using PowerShell syntax)
        Write-Host "Finding DLL location:"
        Get-ChildItem -Path build -Recurse -Filter "gdal_EOPFZarr.dll" | ForEach-Object { $_.FullName }
        
        # Copy from the correct location for Visual Studio generator
        if (Test-Path "build/Release/gdal_EOPFZarr.dll") {
          Copy-Item "build/Release/gdal_EOPFZarr.dll" -Destination dist/
        } else {
          Write-Host "ERROR: DLL not found at expected path"
          dir build -Recurse | Where-Object { $_.Name -like "*.dll" } | ForEach-Object { $_.FullName }
          exit 1
        }
        
        dumpbin /DEPENDENTS dist/gdal_EOPFZarr.dll | findstr "DLL"
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: gdal-plugin-universal
        path: dist/*
