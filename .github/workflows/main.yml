name: Build & test EOPFZarr plugin

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  linux-build:
    name: Linux Build
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      matrix:
        cfg: [Debug, Release]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache APT packages
      uses: actions/cache@v3
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('path/to/lockfile') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install GDAL dev packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
             gdal-bin libgdal-dev cmake ninja-build build-essential

    - name: Configure
      run: |
        cmake -S . -B build/${{ matrix.cfg }} \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.cfg }}

    - name: Build
      run: cmake --build build/${{ matrix.cfg }} --parallel


    - name: Smoke test
      run: |
          export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
          echo "Test 1- Checking for EOPFZARR driver in available formats:"
          gdalinfo --formats | grep "EOPFZARR" || echo "EOPFZARR driver not found!"
          # Create a more complete Zarr test dataset
          echo "Testing with sample data from repository:"
          ls -la $GITHUB_WORKSPACE/src/sample_data/
          echo "Test 2- Opening sample Zarr dataset with EOPF_PROCESS=YES:"

          # Use CPL_DEBUG for detailed driver selection info
          export CPL_DEBUG=OFF
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep -i "driver"
      
          # Verify dimensions or other expected properties of your sample data
          echo "Test 3- Verifying dataset properties:"
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep "Size is" || echo "Dataset dimensions not found"

          # Optional: Show a sample of the full output
          echo "Test 4- Sample of dataset info:"
          CPL_LOG_ERRORS=OFF gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | head -n 50

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Get the system GDAL version first
        GDAL_VERSION=$(gdal-config --version)
        echo "System GDAL version: ${GDAL_VERSION}"
        # Install the matching GDAL Python bindings
        pip install gdal==${GDAL_VERSION}
        # Install other requirements but exclude GDAL
        grep -v "gdal" tests/requirements.txt | pip install -r /dev/stdin

    - name: Run Python tests
      run: |
        # Set the driver path so Python tests can find the plugin
        export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        # Run pytest
        cd tests
        pytest -xvs python/

    - name: Debug info
      if: failure()
      run: |
        echo "Listing available GDAL drivers:"
        gdalinfo --formats
        echo "Listing contents of the driver path:"
        ls -la $GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        echo "Listing contents of test Zarr dataset:"
        ls -la /tmp/test.zarr/
        echo "GDAL version information:"
        gdalinfo --version

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gdal_EOPFZarr-${{ matrix.cfg }}
        path: build/${{ matrix.cfg }}/gdal_EOPFZarr.so

  windows-build:
    name: Windows Build
    runs-on: windows-latest
    strategy:
        matrix:
          cfg: [Release, Debug]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install OSGeo4W
      shell: pwsh
      run: |
            $osgeoDir = "C:\OSGeo4W"
            New-Item -Path $osgeoDir -ItemType Directory -Force
            Invoke-WebRequest -Uri "https://download.osgeo.org/osgeo4w/v2/osgeo4w-setup.exe" -OutFile "osgeo4w-setup.exe"
            ".\osgeo4w-setup.exe",
            "--advanced",
            "--quiet-mode",
            "--no-desktop",
            "--no-shortcuts",
            "--root", "C:\OSGeo4W",
            "--arch","x86_64",
            "--site", "https://download.osgeo.org/osgeo4w/v2/" 
            "--packages", "gdal,python3-gdal,cmake,ninja"

      timeout-minutes: 10


    - name: Configure Environment
      shell: pwsh
      run: |
            # Set core paths
            echo "C:\OSGeo4W\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
            $env:GDAL_DATA = "C:\OSGeo4W\share\gdal"
            $env:PROJ_LIB = "C:\OSGeo4W\share\proj"
        
            # Python configuration
            $env:PATH = "C:\OSGeo4W\apps\Python310;C:\OSGeo4W\apps\Python310\Scripts;" + $env:PATH
            python -m pip install --upgrade pip pytest

    - name: Configure CMake
      run: |
            cmake -S . -B build/${{ matrix.cfg }} -G Ninja `
              -DCMAKE_BUILD_TYPE=${{ matrix.cfg }} `
              -DGDAL_DIR="C:/OSGeo4W/cmake" `
              -DCMAKE_PREFIX_PATH="C:/OSGeo4W"

    - name: Build
      run: cmake --build build/${{ matrix.cfg }} --parallel

    - name: Validate Build
      shell: pwsh
      run: |
            # Architecture check
            dumpbin /headers build\${{ matrix.cfg }}\gdal_EOPFZarr.dll | findstr "x64"
            if (-not $?) { exit 1 }

            # Dependency check
            dumpbin /dependents build\${{ matrix.cfg }}\gdal_EOPFZarr.dll | findstr "MSVCP140"

    - name: Smoke Test
      shell: pwsh
      run: |
            $env:GDAL_DRIVER_PATH = "${{ github.workspace }}\build\${{ matrix.cfg }}"
            gdalinfo --formats | Select-String "EOPFZARR" || (Write-Error "Driver missing"; exit 1)
            gdalinfo -oo EOPF_PROCESS=YES "${{ github.workspace }}\test_data\sample.zarr"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: win-gdal_EOPFZarr-${{ matrix.cfg }}
        path: build/${{ matrix.cfg }}/gdal_EOPFZarr.dll

