name: Build, Test & Release EOPFZarr Plugin

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  lint:
    name: Lint • cppcheck & clang-format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends cppcheck clang-format

      - name: cppcheck
        run: |
          cppcheck --enable=all --inconclusive --xml --xml-version=2 \
            src/ include/ 2> cppcheck-report.xml || true

      - name: Check code formatting
        run: |
          find src include -name "*.cpp" -o -name "*.h" | \
            xargs clang-format --style=file --dry-run --Werror || \
            (echo "Code formatting check failed. Please run 'clang-format -i <file>' on your changes." && exit 1)

      - name: Upload cppcheck report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cppcheck-report
          path: cppcheck-report.xml
          retention-days: 7

  build_and_test:
    name: Build & Test • ${{ matrix.os }} / ${{ matrix.cfg }}
    runs-on: ${{ matrix.os }}
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-13]
        cfg: [Debug, Release]
        # Exclude debug build on macOS for faster CI
        exclude:
          - os: macos-13
            cfg: Debug

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Caching for Linux/macOS
    - if: runner.os != 'Windows'
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ runner.os }}-${{ matrix.cfg }}-${{ hashFiles('**/*.cpp','**/*.h') }}
        restore-keys: ${{ runner.os }}-${{ matrix.cfg }}-

    # Platform-specific dependencies
    - name: Install deps (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          gdal-bin libgdal-dev cmake ninja-build build-essential

    - name: Install deps (macOS)
      if: runner.os == 'macOS'
      run: brew install gdal cmake ninja

    - name: Install deps (Windows)
      if: runner.os == 'Windows'
      uses: echoix/setup-OSGeo4W@v0.2.0
      with:
        packages: gdal-devel cmake ninja
        root: C:\OSGeo4W

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    # Configure & Build
    - name: Configure & Build (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.cfg }}
        cmake --build build --parallel

    - name: Configure & Build (Windows)
      if: runner.os == 'Windows'
      run: |
        cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="C:/OSGeo4W;C:/OSGeo4W/apps/gdal" -DGDAL_DIR="C:/OSGeo4W/apps/gdal/lib/cmake/gdal"
        cmake --build build --config ${{ matrix.cfg }} --parallel

    # Testing
    - name: Unit Tests (C++)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cd build
        ctest -C ${{ matrix.cfg }} --output-on-failure
        
    - name: Unit Tests (C++) - Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd build
        ctest -C ${{ matrix.cfg }} --output-on-failure

    - name: Integration Tests (Python)
      shell: bash
      run: |
        # Install pytest and dependencies
        python -m pip install pytest pytest-benchmark
        
        # Set environment for tests
        if [ "${{ runner.os }}" = "Windows" ]; then
          export GDAL_DRIVER_PATH="$PWD/build/${{ matrix.cfg }}"
          export GDAL_DATA="C:/OSGeo4W/share/gdal"
          export PATH="C:/OSGeo4W/bin:$PATH"
        else
          export GDAL_DRIVER_PATH="$PWD/build"
        fi
        
        # Run Python integration tests
        python -m pytest tests/integration/ -v --tb=short
        
    - name: Smoke test (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        export GDAL_DRIVER_PATH="$PWD/build"
        gdalinfo --formats | grep "EOPFZARR"

    - name: Smoke test (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $env:GDAL_DRIVER_PATH = "$pwd\build\${{ matrix.cfg }}"
        $env:GDAL_DATA = "C:\OSGeo4W\share\gdal"
        $env:PATH = "C:\OSGeo4W\bin;" + $env:PATH
        gdalinfo --formats | findstr "EOPFZARR"

    # Upload Artifacts
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: gdal_EOPFZarr-${{ runner.os }}-${{ matrix.cfg }}
        path: |
          build/gdal_EOPFZarr.so
          build/gdal_EOPFZarr.dylib
          build/Release/gdal_EOPFZarr.dll
          build/Debug/gdal_EOPFZarr.dll
        if-no-files-found: ignore

  package-release:
    name: Package Release Artifacts
    runs-on: ubuntu-22.04
    needs: [build_and_test]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display downloaded artifacts structure
      run: ls -R artifacts

    - name: Create Release Packages
      run: |
        mkdir -p release_packages
        for dir in artifacts/*; do
          if [ -d "$dir" ]; then
            PKG_NAME=$(basename "$dir")
            zip -r "release_packages/${PKG_NAME}.zip" "$dir"
            tar -czf "release_packages/${PKG_NAME}.tar.gz" -C "$dir" .
          fi
        done

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        files: release_packages/*
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}
