name: Build & test EOPFZarr plugin

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  linux-build:
    name: Linux Build
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      matrix:
        cfg: [Debug, Release]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache APT packages
      uses: actions/cache@v3
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('path/to/lockfile') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install GDAL dev packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
             gdal-bin libgdal-dev cmake ninja-build build-essential

    - name: Configure
      run: |
        cmake -S . -B build/${{ matrix.cfg }} \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.cfg }}

    - name: Build
      run: cmake --build build/${{ matrix.cfg }} --parallel


    - name: Smoke test
      run: |
          export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
          echo "Test 1- Checking for EOPFZARR driver in available formats:"
          gdalinfo --formats | grep "EOPFZARR" || echo "EOPFZARR driver not found!"
          # Create a more complete Zarr test dataset
          echo "Testing with sample data from repository:"
          ls -la $GITHUB_WORKSPACE/src/sample_data/
          echo "Test 2- Opening sample Zarr dataset with EOPF_PROCESS=YES:"

          # Use CPL_DEBUG for detailed driver selection info
          export CPL_DEBUG=OFF
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep -i "driver"
      
          # Verify dimensions or other expected properties of your sample data
          echo "Test 3- Verifying dataset properties:"
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep "Size is" || echo "Dataset dimensions not found"

          # Optional: Show a sample of the full output
          echo "Test 4- Sample of dataset info:"
          CPL_LOG_ERRORS=OFF gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | head -n 50

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Get the system GDAL version first
        GDAL_VERSION=$(gdal-config --version)
        echo "System GDAL version: ${GDAL_VERSION}"
        # Install the matching GDAL Python bindings
        pip install gdal==${GDAL_VERSION}
        # Install other requirements but exclude GDAL
        grep -v "gdal" tests/requirements.txt | pip install -r /dev/stdin

    - name: Run Python tests
      run: |
        # Set the driver path so Python tests can find the plugin
        export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        # Run pytest
        cd tests
        pytest -xvs python/

    - name: Debug info
      if: failure()
      run: |
        echo "Listing available GDAL drivers:"
        gdalinfo --formats
        echo "Listing contents of the driver path:"
        ls -la $GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        echo "Listing contents of test Zarr dataset:"
        ls -la /tmp/test.zarr/
        echo "GDAL version information:"
        gdalinfo --version

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gdal_EOPFZarr-${{ matrix.cfg }}
        path: build/${{ matrix.cfg }}/gdal_EOPFZarr.so

  windows-build:
    name: Windows Build
    runs-on: windows-latest
    strategy:
      matrix:
        cfg: [Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install OSGeo4W
        shell: pwsh
        run: |
          # Download OSGeo4W installer
          Invoke-WebRequest -Uri "https://download.osgeo.org/osgeo4w/v2/osgeo4w-setup.exe" -OutFile "osgeo4w-setup.exe"
          
          # Create OSGeo4W directory
          mkdir -p C:/OSGeo4W
          
          # Run installer to get core libraries
          ./osgeo4w-setup.exe --quiet-mode --upgrade-also --root C:/OSGeo4W --packages gdal-dev,python3-gdal
          
          # Add OSGeo4W to PATH
          echo "C:\OSGeo4W\bin;C:\OSGeo4W\apps\gdal\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
          
          # Print version info
          gdalinfo --version

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure CMake
        shell: pwsh
        run: |
          # Use the same configuration command as your local build
          cmake -S . -B build `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_BUILD_TYPE=${{ matrix.cfg }} `
            -DCMAKE_PREFIX_PATH="C:/OSGeo4W;C:/OSGeo4W/apps/gdal"

      - name: Build
        run: cmake --build build --config ${{ matrix.cfg }} --parallel

      - name: Analyze Dependencies
        shell: pwsh
        run: |
          # Find dependencies
          $dll = "build\${{ matrix.cfg }}\gdal_EOPFZarr.dll"
          $output = dumpbin /dependents $dll 2>&1
          
          # Output dependencies for debugging
          echo "DLL Dependencies:"
          echo $output
          
          # Check if we link to GDAL
          $output | Select-String -Pattern "gdal.*\.dll" -AllMatches | ForEach-Object { $_.Matches.Value }

      - name: Collect Dependencies
        shell: pwsh
        run: |
          # Create a directory to collect dependencies
          mkdir deps
          
          # Copy core GDAL DLLs (these are the ones most likely needed)
          Copy-Item "C:\OSGeo4W\bin\gdal*.dll" deps\
          Copy-Item "C:\OSGeo4W\bin\libcrypto*.dll" deps\ -ErrorAction SilentlyContinue
          Copy-Item "C:\OSGeo4W\bin\libssl*.dll" deps\ -ErrorAction SilentlyContinue
          Copy-Item "C:\OSGeo4W\bin\libpq*.dll" deps\ -ErrorAction SilentlyContinue
          
          # Copy CRT dependencies (the Visual C++ runtime)
          Copy-Item "C:\Windows\System32\msvcp140.dll" deps\ -ErrorAction SilentlyContinue
          Copy-Item "C:\Windows\System32\vcruntime140.dll" deps\ -ErrorAction SilentlyContinue
          Copy-Item "C:\Windows\System32\vcruntime140_1.dll" deps\ -ErrorAction SilentlyContinue

      - name: Create Bundle
        shell: pwsh
        run: |
          # Create a directory for the bundle
          mkdir bundle
          
          # Copy the plugin and its dependencies
          Copy-Item "build\${{ matrix.cfg }}\gdal_EOPFZarr.dll" bundle\
          Copy-Item "deps\*" bundle\
          
          # Create a README with installation instructions
          @"
          # EOPF Zarr GDAL Plugin

          ## Installation Instructions
          
          1. Copy gdal_EOPFZarr.dll to your GDAL plugins folder (e.g., C:\OSGeo4W\apps\gdal\lib\gdalplugins\)
          2. Copy any missing dependency DLLs to your system PATH (e.g., C:\OSGeo4W\bin\)
          3. Set GDAL_DRIVER_PATH if your plugins folder is not in the default location
          
          ## Dependencies
          
          This package includes dependency DLLs that might be required if they're missing on your system.
          "@ | Out-File -FilePath "bundle\README.txt" -Encoding utf8

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gdal_EOPFZarr-${{ matrix.cfg }}-bundle
          path: |
            bundle/*

      - name: Upload Plugin Only
        uses: actions/upload-artifact@v4
        with:
          name: gdal_EOPFZarr-${{ matrix.cfg }}
          path: build/${{ matrix.cfg }}/gdal_EOPFZarr.dll

