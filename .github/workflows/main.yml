name: Build & test EOPFZarr plugin

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  linux-build:
    name: Linux Build
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      matrix:
        cfg: [Debug, Release]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache APT packages
      uses: actions/cache@v3
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('path/to/lockfile') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install GDAL dev packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
             gdal-bin libgdal-dev cmake ninja-build build-essential

    - name: Configure
      run: |
        cmake -S . -B build/${{ matrix.cfg }} \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.cfg }}

    - name: Build
      run: cmake --build build/${{ matrix.cfg }} --parallel


    - name: Smoke test
      run: |
          export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
          echo "Test 1- Checking for EOPFZARR driver in available formats:"
          gdalinfo --formats | grep "EOPFZARR" || echo "EOPFZARR driver not found!"
          # Create a more complete Zarr test dataset
          echo "Testing with sample data from repository:"
          ls -la $GITHUB_WORKSPACE/src/sample_data/
          echo "Test 2- Opening sample Zarr dataset with EOPF_PROCESS=YES:"

          # Use CPL_DEBUG for detailed driver selection info
          export CPL_DEBUG=OFF
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep -i "driver"
      
          # Verify dimensions or other expected properties of your sample data
          echo "Test 3- Verifying dataset properties:"
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep "Size is" || echo "Dataset dimensions not found"

          # Optional: Show a sample of the full output
          echo "Test 4- Sample of dataset info:"
          CPL_LOG_ERRORS=OFF gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | head -n 50

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Get the system GDAL version first
        GDAL_VERSION=$(gdal-config --version)
        echo "System GDAL version: ${GDAL_VERSION}"
        # Install the matching GDAL Python bindings
        pip install gdal==${GDAL_VERSION}
        # Install other requirements but exclude GDAL
        grep -v "gdal" tests/requirements.txt | pip install -r /dev/stdin

    - name: Run Python tests
      run: |
        # Set the driver path so Python tests can find the plugin
        export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        # Run pytest
        cd tests
        pytest -xvs python/

    - name: Debug info
      if: failure()
      run: |
        echo "Listing available GDAL drivers:"
        gdalinfo --formats
        echo "Listing contents of the driver path:"
        ls -la $GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        echo "Listing contents of test Zarr dataset:"
        ls -la /tmp/test.zarr/
        echo "GDAL version information:"
        gdalinfo --version

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gdal_EOPFZarr-${{ matrix.cfg }}
        path: build/${{ matrix.cfg }}/gdal_EOPFZarr.so

  windows-build:
    name: Windows Build
    runs-on: windows-latest
    strategy:
      matrix:
        cfg: [Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download OSGeo4W
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://download.osgeo.org/osgeo4w/v2/osgeo4w-setup.exe" -OutFile "osgeo4w-setup.exe"

      - name: Install OSGeo4W
        shell: cmd
        run: |
          mkdir C:\OSGeo4W
          osgeo4w-setup.exe --quiet-mode --no-desktop --no-startmenu --no-shortcuts --upgrade-also --root C:\OSGeo4W --packages gdal-dev,python3-gdal

      - name: Setup Environment
        shell: pwsh
        run: |
          # Add OSGeo4W bin directories to PATH
          echo "C:\OSGeo4W\bin;C:\OSGeo4W\apps\gdal\bin;C:\OSGeo4W\apps\Qt5\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
          
          # Set GDAL environment variables
          echo "GDAL_DATA=C:\OSGeo4W\share\gdal" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          # Run OSGeo4W shell setup
          if (Test-Path "C:\OSGeo4W\OSGeo4W.bat") {
            # Extract environment variables from OSGeo4W.bat
            $tempFile = "env_vars.txt"
            cmd /c "C:\OSGeo4W\OSGeo4W.bat && set > $tempFile"
            
            # Read the environment variables
            Get-Content $tempFile | ForEach-Object {
              if ($_ -match "^(.*?)=(.*)$") {
                $name = $matches[1]
                $value = $matches[2]
                
                # Skip some variables
                if ($name -notin @("PROMPT", "CMDLINE", "COMSPEC", "PS1")) {
                  # Set important environment variables
                  if ($name -in @("PATH", "GDAL_DATA", "GDAL_DRIVER_PATH", "PROJ_LIB")) {
                    echo "$name=$value" | Out-File -FilePath $env:GITHUB_ENV -Append
                  }
                }
              }
            }
            
            # Clean up
            Remove-Item $tempFile
          }
          
      - name: Verify GDAL Installation
        shell: cmd
        run: |
          echo "GDAL executable location:"
          where gdalinfo
          echo "GDAL version:"
          gdalinfo --version
          echo "PATH environment variable:"
          echo %PATH%
          echo "Directory listing of OSGeo4W\bin:"
          dir C:\OSGeo4W\bin\*.dll

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure CMake
        shell: cmd
        run: |
          cmake -S . -B build ^
            -G "Visual Studio 17 2022" ^
            -A x64 ^
            -DCMAKE_BUILD_TYPE=${{ matrix.cfg }} ^
            -DCMAKE_PREFIX_PATH="C:/OSGeo4W;C:/OSGeo4W/apps/gdal" ^
            -DGDAL_INCLUDE_DIR="C:/OSGeo4W/include" ^
            -DGDAL_LIBRARY="C:/OSGeo4W/lib/gdal_i.lib"

      - name: Build
        run: cmake --build build --config ${{ matrix.cfg }} --parallel

      - name: Analyze Dependencies
        shell: cmd
        run: |
          dumpbin /dependents build\${{ matrix.cfg }}\gdal_EOPFZarr.dll

      - name: Collect Dependencies
        shell: cmd
        run: |
          mkdir deps
          copy C:\OSGeo4W\bin\gdal*.dll deps\
          copy C:\Windows\System32\msvcp140.dll deps\
          copy C:\Windows\System32\vcruntime140.dll deps\
          copy C:\Windows\System32\vcruntime140_1.dll deps\

      - name: Create Bundle
        shell: pwsh
        run: |
          mkdir bundle
          Copy-Item "build\${{ matrix.cfg }}\gdal_EOPFZarr.dll" bundle\
          Copy-Item "deps\*" bundle\
          
          @"
          # EOPF Zarr GDAL Plugin

          ## Installation Instructions
          
          1. Copy gdal_EOPFZarr.dll to your GDAL plugins folder (C:\OSGeo4W\apps\gdal\lib\gdalplugins\)
          2. Copy any missing dependency DLLs to your system PATH (C:\OSGeo4W\bin\)
          
          ## Troubleshooting
          
          If you get error 126 (module not found):
          
          1. Make sure your OSGeo4W GDAL version matches the one used to build this plugin
          2. Copy all DLLs from this package to the same folder as the plugin
          3. Use 'depends.exe' tool to identify any missing dependencies
          "@ | Out-File -FilePath "bundle\README.txt" -Encoding utf8

      - name: Test Plugin Loading
        shell: cmd
        run: |
          set GDAL_DRIVER_PATH=%CD%\build\${{ matrix.cfg }}
          gdalinfo --formats | findstr "EOPFZARR" || echo EOPFZARR driver not found

      - name: Upload Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gdal_EOPFZarr-${{ matrix.cfg }}-bundle
          path: bundle/*

      - name: Upload Plugin Only
        uses: actions/upload-artifact@v4
        with:
          name: gdal_EOPFZarr-${{ matrix.cfg }}
          path: build/${{ matrix.cfg }}/gdal_EOPFZarr.dll

