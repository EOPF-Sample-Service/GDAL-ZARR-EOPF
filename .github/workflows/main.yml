name: Build & test EOPFZarr plugin

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  linux-build:
    name: Linux Build
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      matrix:
        cfg: [Debug, Release]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache APT packages
      uses: actions/cache@v3
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('path/to/lockfile') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install GDAL dev packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
             gdal-bin libgdal-dev cmake ninja-build build-essential

    - name: Configure
      run: |
        cmake -S . -B build/${{ matrix.cfg }} \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.cfg }}

    - name: Build
      run: cmake --build build/${{ matrix.cfg }} --parallel


    - name: Smoke test
      run: |
          export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
          echo "Test 1- Checking for EOPFZARR driver in available formats:"
          gdalinfo --formats | grep "EOPFZARR" || echo "EOPFZARR driver not found!"
          # Create a more complete Zarr test dataset
          echo "Testing with sample data from repository:"
          ls -la $GITHUB_WORKSPACE/src/sample_data/
          echo "Test 2- Opening sample Zarr dataset with EOPF_PROCESS=YES:"

          # Use CPL_DEBUG for detailed driver selection info
          export CPL_DEBUG=OFF
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep -i "driver"
      
          # Verify dimensions or other expected properties of your sample data
          echo "Test 3- Verifying dataset properties:"
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep "Size is" || echo "Dataset dimensions not found"

          # Optional: Show a sample of the full output
          echo "Test 4- Sample of dataset info:"
          CPL_LOG_ERRORS=OFF gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | head -n 50

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Get the system GDAL version first
        GDAL_VERSION=$(gdal-config --version)
        echo "System GDAL version: ${GDAL_VERSION}"
        # Install the matching GDAL Python bindings
        pip install gdal==${GDAL_VERSION}
        # Install other requirements but exclude GDAL
        grep -v "gdal" tests/requirements.txt | pip install -r /dev/stdin

    - name: Run Python tests
      run: |
        # Set the driver path so Python tests can find the plugin
        export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        # Run pytest
        cd tests
        pytest -xvs python/

    - name: Debug info
      if: failure()
      run: |
        echo "Listing available GDAL drivers:"
        gdalinfo --formats
        echo "Listing contents of the driver path:"
        ls -la $GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        echo "Listing contents of test Zarr dataset:"
        ls -la /tmp/test.zarr/
        echo "GDAL version information:"
        gdalinfo --version

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gdal_EOPFZarr-${{ matrix.cfg }}
        path: build/${{ matrix.cfg }}/gdal_EOPFZarr.so

  windows-build:
    name: Windows Build
    runs-on: windows-latest
    strategy:
      matrix:
        cfg: [Release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Use Conda to install GDAL - much more reliable than OSGeo4W in CI
      - name: Setup Conda with GDAL
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: '3.10'
          channels: conda-forge
          activate-environment: gdal-env

      - name: Install GDAL with Conda
        shell: bash -el {0}
        run: |
          conda install -y gdal=3.6.2 cmake ninja
          conda info
          conda list
          which gdal-config
          gdal-config --version
          gdalinfo --version
          echo "GDAL_ROOT=$CONDA_PREFIX" >> $GITHUB_ENV

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure CMake
        shell: bash -el {0}
        run: |
          export GDAL_ROOT=$CONDA_PREFIX
          
          cmake -S . -B build \
            -G "Ninja" \
            -DCMAKE_BUILD_TYPE=${{ matrix.cfg }} \
            -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" \
            -DGDAL_INCLUDE_DIR="$CONDA_PREFIX/include" \
            -DGDAL_LIBRARY="$CONDA_PREFIX/lib/gdal.lib" \
            -DCMAKE_VERBOSE_MAKEFILE=ON

      - name: Build
        shell: bash -el {0}
        run: |
          cmake --build build --config ${{ matrix.cfg }} --parallel

      - name: Analyze Dependencies
        shell: bash -el {0}
        run: |
          # Using objdump from conda environment instead of dumpbin
          echo "DLL Dependencies:"
          $CONDA_PREFIX/Library/bin/objdump -p build/gdal_EOPFZarr.dll | grep "DLL Name:"

      - name: Collect Dependencies
        shell: bash -el {0}
        run: |
          mkdir -p deps
          # Copy GDAL DLLs from the conda environment
          cp $CONDA_PREFIX/Library/bin/gdal*.dll deps/ || echo "No GDAL DLLs found"
          # Copy CRT DLLs
          cp $CONDA_PREFIX/Library/bin/vcruntime140*.dll deps/ || echo "No vcruntime DLLs found"
          cp $CONDA_PREFIX/Library/bin/msvcp140*.dll deps/ || echo "No msvcp DLLs found"
          
          # List collected dependencies
          ls -la deps/

      - name: Create Bundle
        shell: bash -el {0}
        run: |
          mkdir -p bundle
          cp build/gdal_EOPFZarr.dll bundle/
          cp deps/* bundle/ || echo "No dependencies to copy"
          
          cat > bundle/README.txt << 'EOL'
          # EOPF Zarr GDAL Plugin

          ## Installation Instructions
          
          1. Copy gdal_EOPFZarr.dll to your GDAL plugins folder (C:\OSGeo4W\apps\gdal\lib\gdalplugins\)
          2. Copy all DLLs from this package to your PATH (C:\OSGeo4W\bin\)
          
          ## Troubleshooting
          
          If you get error 126 (module not found):
          
          1. Make sure your OSGeo4W/GDAL version matches the one used to build this plugin (3.6.2)
          2. Copy all DLLs from this package to the same folder as the plugin
          3. Use 'depends.exe' tool to identify any missing dependencies
          EOL

      - name: Test Plugin Loading
        shell: bash -el {0}
        run: |
          export GDAL_DRIVER_PATH=$(pwd)/build
          gdalinfo --formats | grep "EOPFZARR" || echo "EOPFZARR driver not found"

      - name: Upload Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gdal_EOPFZarr-${{ matrix.cfg }}-conda-bundle
          path: bundle/*

      - name: Upload Plugin Only
        uses: actions/upload-artifact@v4
        with:
          name: gdal_EOPFZarr-${{ matrix.cfg }}
          path: build/gdal_EOPFZarr.dll

