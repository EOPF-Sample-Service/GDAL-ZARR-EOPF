name: Build, Test & Release EOPFZarr Plugin

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write
  actions: read
  checks: write

jobs:
  lint:
    name: Lint • cppcheck & clang-format
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install tools
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends cppcheck clang-format
      - name: cppcheck
        run: |
          cppcheck --enable=all --inconclusive --xml --xml-version=2 \
            src/ include/ 2> cppcheck-report.xml || true
      - name: Check code formatting
        run: |
          find src include -name "*.cpp" -o -name "*.h" | \
            xargs clang-format --style=file --dry-run --Werror || \
            (echo "Code formatting check failed. Please run 'clang-format -i' on your changes." && exit 1)
      - name: Upload cppcheck report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cppcheck-report
          path: cppcheck-report.xml
          retention-days: 7

  build_and_test:
    name: Build & Test • ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-13]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Caching for Linux/macOS
      - if: runner.os != 'Windows'
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/*.cpp','**/*.h') }}
          restore-keys: ${{ runner.os }}-

      # Platform-specific dependencies
      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            gdal-bin libgdal-dev cmake ninja-build build-essential

      - name: Install deps (macOS)
        if: runner.os == 'macOS'
        run: |
          # Install GDAL and build tools via Homebrew
          brew install gdal cmake ninja
          
          # Install GDAL Python bindings with proper version matching
          GDAL_VERSION=$(gdal-config --version)
          echo "Installing GDAL Python bindings for version: $GDAL_VERSION"
          
          # Method 1: Try pip install with version matching
          pip install GDAL==$GDAL_VERSION || {
            echo "Direct pip install failed, trying manual compilation method..."
            
            # Method 2: Manual compilation approach
            pip download GDAL==$GDAL_VERSION
            tar -xzf GDAL-$GDAL_VERSION.tar.gz
            cd GDAL-$GDAL_VERSION
            
            # Configure for macOS Homebrew GDAL installation
            python setup.py build_ext --gdal-config=$(which gdal-config)
            python setup.py build
            python setup.py install
            cd ..
            rm -rf GDAL-$GDAL_VERSION*
          }
          
          # Verify GDAL Python bindings installation
          python -c "from osgeo import gdal; print(f'GDAL Python bindings version: {gdal.VersionInfo()}')"
          
      - name: Install deps (Windows)
        if: runner.os == 'Windows'
        uses: echoix/setup-OSGeo4W@v0.2.0
        with:
          packages: gdal-devel cmake ninja python3-core python3-pip python3-gdal python3-numpy python3-pytest
          root: C:\OSGeo4W

      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Configure & Build
      - name: Configure & Build (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel

      - name: Configure & Build (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="C:/OSGeo4W;C:/OSGeo4W/apps/gdal" -DGDAL_DIR="C:/OSGeo4W/apps/gdal/lib/cmake/gdal"
          cmake --build build --config Release --parallel

      # Testing
      - name: Unit Tests (C++)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd build
          ctest -C Release --output-on-failure

      - name: Unit Tests (C++) - Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:GDAL_DRIVER_PATH = "$pwd\build\Release"
          $env:GDAL_DATA = "C:\OSGeo4W\share\gdal"
          $env:PATH = "C:\OSGeo4W\bin;" + $env:PATH
          cd build
          
          # Try to find ctest in common locations
          $ctestPaths = @(
            "C:\Program Files\CMake\bin\ctest.exe",
            "C:\Program Files (x86)\CMake\bin\ctest.exe",
            "C:\OSGeo4W\bin\ctest.exe",
            "ctest.exe"
          )
          
          $ctestFound = $false
          foreach ($ctestPath in $ctestPaths) {
            if (Test-Path $ctestPath -ErrorAction SilentlyContinue) {
              Write-Host "Using ctest from: $ctestPath"
              & $ctestPath -C Release --output-on-failure
              $ctestFound = $true
              break
            } elseif ($ctestPath -eq "ctest.exe") {
              try {
                & $ctestPath -C Release --output-on-failure
                $ctestFound = $true
                break
              } catch {
                # Continue to next option
              }
            }
          }
          
          if (-not $ctestFound) {
            Write-Host "ctest not found, trying alternative approach..."
            cmake --build . --config Release --target RUN_TESTS
          }


      - name: Integration Tests (Python) - Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Setting up environment variables..."
          $env:GDAL_DRIVER_PATH = "$PWD\build\Release"
          $env:GDAL_DATA = "C:\OSGeo4W\share\gdal"
          $env:PROJ_LIB = "C:\OSGeo4W\share\proj"
          $env:PATH = "C:\OSGeo4W\bin;C:\OSGeo4W\apps\Python312;C:\OSGeo4W\apps\Python312\Scripts;" + $env:PATH
          $env:PYTHONPATH = "C:\OSGeo4W\apps\Python312\Lib\site-packages"
          
          # Use OSGeo4W Python directly
          $pythonExe = "C:\OSGeo4W\apps\Python312\python3.exe"
          
          Write-Host "Verifying Python and GDAL..."
          & $pythonExe --version
          & $pythonExe -c "from osgeo import gdal; print(f'GDAL version: {gdal.VersionInfo()}')"
          
          Write-Host "Installing required packages..."
          & $pythonExe -m pip install pytest rasterio numpy
          
          Write-Host "Verifying package installation..."
          & $pythonExe -c "import pytest, rasterio, numpy; print('All packages imported successfully')"
          
          Write-Host "Running integration tests..."
          & $pythonExe -m pytest -c pytest.ini tests/integration/ -v --tb=short
          
      - name: Integration Tests (Python) - Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          # Install Python packages including rasterio
          python -m pip install pytest numpy rasterio
          
          # Set environment for tests
          export GDAL_DRIVER_PATH="$PWD/build"
          
          # Verify installations
          python -c "from osgeo import gdal; import rasterio; print('GDAL and rasterio available')"
          
          # Run integration tests
          python -m pytest -c pytest.ini tests/integration/ -v --tb=short

      
      - name: Integration Tests (Python) - macOS
        if: runner.os == 'macOS'
        run: |
          # Install pytest, numpy, and rasterio
          python -m pip install pytest numpy rasterio
          
          # Set environment variables for macOS
          export GDAL_DRIVER_PATH="$PWD/build"
          export GDAL_DATA="$(brew --prefix)/share/gdal"
          export PROJ_LIB="$(brew --prefix)/share/proj"
          
          # Add Homebrew paths to ensure libraries are found
          export PATH="$(brew --prefix)/bin:$PATH"
          export DYLD_LIBRARY_PATH="$(brew --prefix)/lib:$DYLD_LIBRARY_PATH"
          
          # Verify GDAL Python bindings and rasterio
          python -c "from osgeo import gdal; import rasterio; print('GDAL and rasterio available')"
          
          # Debug: List test files to ensure they exist
          echo "Integration test files:"
          find tests/integration/ -name "*.py" -type f 2>/dev/null || echo "No Python files found in tests/integration/"
          
          # Run integration tests
          python -m pytest -c pytest.ini tests/integration/ -v --tb=short


      - name: Smoke test (Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          export GDAL_DRIVER_PATH="$PWD/build"
          gdalinfo --formats | grep "EOPFZARR"

      - name: Smoke test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:GDAL_DRIVER_PATH = "$pwd\build\Release"
          $env:GDAL_DATA = "C:\OSGeo4W\share\gdal"
          $env:PATH = "C:\OSGeo4W\bin;" + $env:PATH
          gdalinfo --formats | findstr "EOPFZARR"

      # Upload Artifacts
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gdal_EOPFZarr-${{ runner.os }}
          path: |
            build/gdal_EOPFZarr.so
            build/gdal_EOPFZarr.dylib
            build/Release/gdal_EOPFZarr.dll
          if-no-files-found: ignore

  package-release:
    name: Package Release Artifacts
    runs-on: ubuntu-22.04
    needs: [build_and_test]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Display downloaded artifacts structure
        run: ls -R artifacts
      - name: Create Release Packages
        run: |
          mkdir -p release_packages
          for dir in artifacts/*; do
            if [ -d "$dir" ]; then
              PKG_NAME=$(basename "$dir")
              zip -r "release_packages/${PKG_NAME}.zip" "$dir"
              tar -czf "release_packages/${PKG_NAME}.tar.gz" -C "$dir" .
            fi
          done
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: release_packages/*
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}