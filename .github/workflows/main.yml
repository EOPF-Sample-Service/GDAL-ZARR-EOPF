name: Build & test EOPFZarr plugin

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  linux-build:
    name: Linux Build
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    strategy:
      matrix:
        cfg: [Debug, Release]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache APT packages
      uses: actions/cache@v3
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('path/to/lockfile') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install GDAL dev packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
             gdal-bin libgdal-dev cmake ninja-build build-essential
    - name: Configure
      run: |
        cmake -S . -B build/${{ matrix.cfg }} \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.cfg }}
    - name: Build
      run: cmake --build build/${{ matrix.cfg }} --parallel

    - name: Smoke test
      run: |
          export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
          echo "Test 1- Checking for EOPFZARR driver in available formats:"
          gdalinfo --formats | grep "EOPFZARR" || echo "EOPFZARR driver not found!"
          # Create a more complete Zarr test dataset
          echo "Testing with sample data from repository:"
          ls -la $GITHUB_WORKSPACE/src/sample_data/
          echo "Test 2- Opening sample Zarr dataset with EOPF_PROCESS=YES:"

          # Use CPL_DEBUG for detailed driver selection info
          export CPL_DEBUG=OFF
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep -i "driver"
      
          # Verify dimensions or other expected properties of your sample data
          echo "Test 3- Verifying dataset properties:"
          gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | grep "Size is" || echo "Dataset dimensions not found"

          # Optional: Show a sample of the full output
          echo "Test 4- Sample of dataset info:"
          CPL_LOG_ERRORS=OFF gdalinfo -oo EOPF_PROCESS=YES $GITHUB_WORKSPACE/src/sample_data/ | head -n 50

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Get the system GDAL version first
        GDAL_VERSION=$(gdal-config --version)
        echo "System GDAL version: ${GDAL_VERSION}"
        # Install the matching GDAL Python bindings
        pip install gdal==${GDAL_VERSION}
        # Install other requirements but exclude GDAL
        grep -v "gdal" tests/requirements.txt | pip install -r /dev/stdin

    - name: Run Python tests
      run: |
        # Set the driver path so Python tests can find the plugin
        export GDAL_DRIVER_PATH=$GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        # Run pytest
        cd tests
        pytest -xvs python/

    - name: Debug info
      if: failure()
      run: |
        echo "Listing available GDAL drivers:"
        gdalinfo --formats
        echo "Listing contents of the driver path:"
        ls -la $GITHUB_WORKSPACE/build/${{ matrix.cfg }}
        echo "Listing contents of test Zarr dataset:"
        ls -la /tmp/test.zarr/
        echo "GDAL version information:"
        gdalinfo --version

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gdal_EOPFZarr-${{ matrix.cfg }}
        path: build/${{ matrix.cfg }}/gdal_EOPFZarr.so

  windows-build:
    name: Windows Build
    runs-on: windows-latest
    timeout-minutes: 30
    strategy:
      matrix:
        cfg: [Debug, Release]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup OSGeo4W
      shell: pwsh
      run: |
        # Create a directory for OSGeo4W
        New-Item -Path "C:\" -Name "OSGeo4W" -ItemType Directory -Force

        # Download OSGEO4W installer
        Invoke-WebRequest -Uri "https://download.osgeo.org/osgeo4w/v2/osgeo4w-setup.exe" -OutFile "osgeo4w-setup.exe"

        # Run installer with required packages
        Start-Process -FilePath ".\osgeo4w-setup.exe" -ArgumentList "--advanced --quiet-mode --no-desktop --no-startmenu --no-shortcuts --upgrade-also --root C:\OSGeo4W --packages gdal-dev,python3-gdal" -NoNewWindow -Wait

    - name: Setup environment
      shell: pwsh
      run: |
        echo "C:\OSGeo4W\bin;C:\OSGeo4W\apps\gdal\bin;C:\OSGeo4W\apps\Python39\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Append
      
        # Set environment variables for CMake to find GDAL
        echo "GDAL_DATA=C:\OSGeo4W\share\gdal" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GDAL_ROOT=C:\OSGeo4W" | Out-File -FilePath $env:GITHUB_ENV -Append
      
        # Create a simpler structure for environment variables used by CMake
        mkdir ${{ github.workspace }}\cmake
      
        @"
        set(ENV{GDAL_ROOT} "C:/OSGeo4W")
        set(ENV{GDAL_DIR} "C:/OSGeo4W")
        set(GDAL_INCLUDE_DIR "C:/OSGeo4W/include")
        set(GDAL_LIBRARY "C:/OSGeo4W/lib/gdal_i.lib")
        "@ | Out-File -FilePath "${{ github.workspace }}\cmake\FindGDALConfig.cmake" -Encoding utf8
        
    - name: Configure
      run: |
        cmake -S . -B build/${{ matrix.cfg }} -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.cfg }} -DCMAKE_MODULE_PATH="${{ github.workspace }}/cmake"

  # Rest of the steps remain the same
    - name: Build
      run: cmake --build build/${{ matrix.cfg }} --parallel

    - name: Smoke test
      shell: pwsh
      run: |
        $env:GDAL_DRIVER_PATH = "${{ github.workspace }}\build\${{ matrix.cfg }}"
        
        echo "Test 1- Checking for EOPFZARR driver in available formats:"
        gdalinfo --formats | Select-String "EOPFZARR" || echo "EOPFZARR driver not found!"
        
        echo "Testing with sample data from repository:"
        Get-ChildItem "${{ github.workspace }}\src\sample_data\"
        
        echo "Test 2- Opening sample Zarr dataset with EOPF_PROCESS=YES:"
        $env:CPL_DEBUG = "OFF"
        gdalinfo -oo EOPF_PROCESS=YES "${{ github.workspace }}\src\sample_data\" | Select-String -Pattern "driver" -CaseSensitive:$false
        
        echo "Test 3- Verifying dataset properties:"
        gdalinfo -oo EOPF_PROCESS=YES "${{ github.workspace }}\src\sample_data\" | Select-String -Pattern "Size is" || echo "Dataset dimensions not found"
        
        echo "Test 4- Sample of dataset info:"
        gdalinfo -oo EOPF_PROCESS=YES "${{ github.workspace }}\src\sample_data\" | Select-Object -First 50

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Use OSGeo4W's GDAL for Python
        pip install pytest
        # Add additional requirements as needed

    - name: Run Python tests
      shell: pwsh
      run: |
        $env:GDAL_DRIVER_PATH = "${{ github.workspace }}\build\${{ matrix.cfg }}"
        cd tests
        pytest -xvs python/

    - name: Debug info
      if: failure()
      shell: pwsh
      run: |
        echo "Listing available GDAL drivers:"
        gdalinfo --formats
        echo "Listing contents of the driver path:"
        Get-ChildItem "${{ github.workspace }}\build\${{ matrix.cfg }}"
        echo "GDAL version information:"
        gdalinfo --version

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: gdal_EOPFZarr-windows-${{ matrix.cfg }}
        path: build/${{ matrix.cfg }}/gdal_EOPFZarr.dll
