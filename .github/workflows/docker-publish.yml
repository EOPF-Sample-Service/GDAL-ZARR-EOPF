name: Build and Publish Docker Image

on:
  push:
    branches: 
      - main
      - docker-image-improvements
    tags:
      - 'v*'
  pull_request:
    branches: 
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: eopfsampleservice/eopf-zarr-gdal

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Test EOPFZARR functionality
      if: github.event_name != 'pull_request'
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python3 -c "
        from osgeo import gdal
        import rasterio
        
        print('=== EOPFZARR Docker Image Test ===')
        print('GDAL version:', gdal.VersionInfo())
        print('Rasterio version:', rasterio.__version__)
        
        # Test EOPFZARR driver
        driver = gdal.GetDriverByName('EOPFZARR')
        print('EOPFZARR driver:', 'Available' if driver else 'Not found')
        if driver:
            print('Driver long name:', driver.GetMetadataItem('DMD_LONGNAME'))
            print('âœ… GDAL + EOPFZARR integration working')
        
        # Test environment configuration  
        import rasterio.env
        with rasterio.env.Env(GDAL_DRIVER_PATH='/opt/eopf-zarr/drivers'):
            driver_check = gdal.GetDriverByName('EOPFZARR')
            print('EOPFZARR in rasterio context:', 'Available' if driver_check else 'Not found')
            
        print('âœ… Docker image production ready!')
        print('âœ… Users can access EOPF Zarr datasets with GDAL API')
        print('âœ… Complete Python geospatial environment available')
        "

    - name: Generate Docker Hub README
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      run: |
        echo "# EOPF-Zarr GDAL Driver Docker Image" > docker-hub-readme.md
        echo "" >> docker-hub-readme.md
        echo "ğŸš€ **Production-ready Docker image with EOPF-Zarr GDAL driver and complete Python geospatial stack**" >> docker-hub-readme.md
        echo "" >> docker-hub-readme.md
        echo "## Quick Start" >> docker-hub-readme.md
        echo "" >> docker-hub-readme.md
        echo '```bash' >> docker-hub-readme.md
        echo "# Run JupyterLab (access at http://localhost:8888)" >> docker-hub-readme.md
        echo "docker run -p 8888:8888 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> docker-hub-readme.md
        echo "" >> docker-hub-readme.md
        echo "# Or run interactive shell" >> docker-hub-readme.md
        echo "docker run -it ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest bash" >> docker-hub-readme.md
        echo '```' >> docker-hub-readme.md
        echo "" >> docker-hub-readme.md
        echo "## Usage Example" >> docker-hub-readme.md
        echo '```python' >> docker-hub-readme.md
        echo "# Access EOPF Zarr datasets with GDAL" >> docker-hub-readme.md
        echo "from osgeo import gdal" >> docker-hub-readme.md
        echo 'ds = gdal.Open('"'"'EOPFZARR:"/vsicurl/your-zarr-url"'"'"')' >> docker-hub-readme.md
        echo "data = ds.ReadAsArray()" >> docker-hub-readme.md
        echo '```' >> docker-hub-readme.md
        echo "" >> docker-hub-readme.md
        echo "## Features" >> docker-hub-readme.md
        echo "- âœ… Ubuntu 25.04 with GDAL 3.10.2" >> docker-hub-readme.md
        echo "- âœ… EOPF-Zarr GDAL driver built from source" >> docker-hub-readme.md
        echo "- âœ… Python 3.13 with rasterio, xarray, zarr, dask" >> docker-hub-readme.md
        echo "- âœ… JupyterLab environment with example notebooks" >> docker-hub-readme.md
        echo "- âœ… Remote EOPF Zarr dataset access" >> docker-hub-readme.md
        echo "- âœ… Complete geospatial Python ecosystem" >> docker-hub-readme.md
        echo "" >> docker-hub-readme.md
        echo "## Supported Workflows" >> docker-hub-readme.md
        echo "- **GDAL Python API**: Full support for EOPF Zarr datasets" >> docker-hub-readme.md
        echo "- **Data Science**: xarray, pandas, numpy, matplotlib" >> docker-hub-readme.md
        echo "- **Geospatial Analysis**: geopandas, rasterio, fiona" >> docker-hub-readme.md
        echo "- **Interactive Analysis**: JupyterLab notebooks" >> docker-hub-readme.md
        echo "" >> docker-hub-readme.md
        echo "ğŸ“‹ **Full documentation**: [GitHub Repository](https://github.com/EOPF-Sample-Service/GDAL-ZARR-EOPF)" >> docker-hub-readme.md
        
        cat docker-hub-readme.md
