name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  build-ubuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-22.04  # Use same version as main.yml and branch-protection.yml
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/apt
          /var/cache/apt
        key: ${{ runner.os }}-deps-${{ hashFiles('**/CMakeLists.txt', 'environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-deps-
        
    - name: Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          cmake \
          build-essential \
          ninja-build
          
    - name: Install GDAL
      run: |
        sudo apt-get install -y --no-install-recommends \
          gdal-bin \
          libgdal-dev
        
    - name: Verify GDAL installation
      run: |
        echo "GDAL Version:"
        gdal-config --version
        echo "GDAL Prefix:"
        gdal-config --prefix
        echo "GDAL Include flags:"
        gdal-config --cflags
        echo "GDAL Library flags:"
        gdal-config --libs
        echo "Available GDAL formats:"
        gdalinfo --formats | head -20
        
    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_VERBOSE_MAKEFILE=ON
          
    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build \
          --config ${{env.BUILD_TYPE}} \
          --parallel $(nproc) \
          --verbose
          
    - name: Verify build outputs
      run: |
        echo "Build directory contents:"
        ls -la ${{github.workspace}}/build/
        echo "Plugin file details:"
        file ${{github.workspace}}/build/gdal_EOPFZarr.* || echo "Plugin file not found"
        
    - name: Test plugin loading
      run: |
        export GDAL_DRIVER_PATH="${{github.workspace}}/build:$GDAL_DRIVER_PATH"
        echo "Testing if plugin loads..."
        timeout 30 gdalinfo --formats > formats_output.txt
        if grep -i "eopf" formats_output.txt; then
          echo "✅ EOPF driver successfully loaded!"
        else
          echo "❌ EOPF driver not found in formats list"
          echo "Available formats:"
          cat formats_output.txt
          exit 1
        fi
        
    - name: Run tests
      if: false  # Disable until we have proper tests
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --verbose
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gdal-eopf-plugin-ubuntu-22.04
        path: |
          ${{github.workspace}}/build/gdal_EOPFZarr.*
          ${{github.workspace}}/build/CMakeCache.txt
        retention-days: 7

  # Artifact consolidation job
  consolidate-artifacts:
    name: Consolidate Release Artifacts
    runs-on: ubuntu-22.04
    needs: [build-ubuntu, build-macos]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - name: Download Ubuntu artifacts
      uses: actions/download-artifact@v4
      with:
        name: gdal-eopf-plugin-ubuntu-22.04
        path: ./artifacts/linux/
        
    - name: Download macOS artifacts  
      uses: actions/download-artifact@v4
      with:
        name: gdal-eopf-plugin-macos-conda
        path: ./artifacts/macos/
        
    - name: Create consolidated package
      run: |
        mkdir -p consolidated-release
        
        # Create platform-specific subdirectories
        mkdir -p consolidated-release/{linux,macos,windows}
        
        # Copy and organize artifacts
        cp artifacts/linux/gdal_EOPFZarr.so consolidated-release/linux/
        cp artifacts/macos/gdal_EOPFZarr.dylib consolidated-release/macos/
        
        # Create README with installation instructions
        cat > consolidated-release/README.md << 'EOF'
        # GDAL EOPF Plugin
        
        ## Installation Instructions
        
        ### Linux
        1. Copy `linux/gdal_EOPFZarr.so` to your GDAL plugins directory
        2. Set `GDAL_DRIVER_PATH` environment variable
        
        ### macOS  
        1. Copy `macos/gdal_EOPFZarr.dylib` to your GDAL plugins directory
        2. Set `GDAL_DRIVER_PATH` environment variable
        
        ### Windows
        1. Copy `windows/gdal_EOPFZarr.dll` to your GDAL plugins directory
        2. Set `GDAL_DRIVER_PATH` environment variable
        
        ## Usage
        ```bash
        export GDAL_DRIVER_PATH=/path/to/plugins:$GDAL_DRIVER_PATH
        gdalinfo --formats | grep EOPF
        ```
        EOF
        
        # Create version info
        echo "Built on: $(date)" > consolidated-release/BUILD_INFO.txt
        echo "Commit: ${{ github.sha }}" >> consolidated-release/BUILD_INFO.txt
        echo "Workflow: ${{ github.workflow }}" >> consolidated-release/BUILD_INFO.txt
        
        # Show contents
        find consolidated-release -type f -exec ls -la {} \;
        
    - name: Upload consolidated artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gdal-eopf-plugin-all-platforms-${{ github.run_number }}
        path: consolidated-release/
        retention-days: 30

  build-macos:
    name: Build on macOS (Conda)
    runs-on: macos-latest
    timeout-minutes: 15  # Much faster with conda
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.10'
        miniforge-version: latest
        
    - name: Install GDAL via conda-forge
      shell: bash -el {0}
      run: |
        conda install -c conda-forge gdal cmake ninja -y
        echo "Conda cache size:"
        du -sh $CONDA_PKGS_DIRS || echo "Cache size check failed"
        
    - name: Verify GDAL installation
      shell: bash -el {0}
      run: |
        gdal-config --version
        gdal-config --prefix
        
    - name: Configure CMake
      shell: bash -el {0}
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
          -DCMAKE_VERBOSE_MAKEFILE=ON
          
    - name: Build
      shell: bash -el {0}
      run: |
        cmake --build ${{github.workspace}}/build \
          --config ${{env.BUILD_TYPE}} \
          --parallel $(sysctl -n hw.logicalcpu)
          
    - name: Test plugin loading
      shell: bash -el {0}
      run: |
        export GDAL_DRIVER_PATH="${{github.workspace}}/build:$GDAL_DRIVER_PATH"
        gdalinfo --formats | grep -i eopf || echo "EOPF driver not found"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gdal-eopf-plugin-macos-conda
        path: |
          ${{github.workspace}}/build/gdal_EOPFZarr.*
        retention-days: 7

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-22.04  # Use consistent Ubuntu version
    needs: build-ubuntu
    if: false  # Enable when we have test data
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: gdal-eopf-plugin-ubuntu-22.04
        path: ./plugin/
        
    - name: Install GDAL
      run: |
        sudo apt-get update
        sudo apt-get install -y libgdal-dev gdal-bin
        
    - name: Test with sample data
      run: |
        export GDAL_DRIVER_PATH="./plugin:$GDAL_DRIVER_PATH"
        # Add tests with real EOPF data here
        echo "Integration tests would run here"
        
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-22.04  # Use consistent Ubuntu version
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cppcheck \
          clang-format \
          libgdal-dev
          
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 \
          src/ include/ 2> cppcheck-report.xml || true
        
    - name: Check code formatting
      run: |
        find src include -name "*.cpp" -o -name "*.h" | \
          xargs clang-format --style=file --dry-run --Werror || \
          echo "Code formatting check failed - run clang-format to fix"
        
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          cppcheck-report.xml
        retention-days: 30
