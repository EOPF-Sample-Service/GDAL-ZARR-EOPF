# EOPF-Zarr GDAL Driver - Docker Image
# Based on Ubuntu 25 with GDAL 3.10 and EOPF Python environment
FROM ubuntu:25.04

LABEL maintainer="EOPF Sample Service"
LABEL description="EOPF-Zarr GDAL Driver with Ubuntu 25, GDAL 3.10, and EOPF Python environment"
LABEL version="2.0.0"

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONPATH=/usr/local/lib/python3.13/site-packages
ENV GDAL_DRIVER_PATH=/opt/eopf-zarr/drivers
ENV GDAL_DATA=/usr/share/gdal
ENV PROJ_LIB=/usr/share/proj

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Build tools
    build-essential \
    cmake \
    pkg-config \
    git \
    wget \
    curl \
    # GDAL and geospatial libraries
    gdal-bin \
    libgdal-dev \
    libproj-dev \
    libgeos-dev \
    # Python development
    python3 \
    python3-dev \
    python3-pip \
    # Additional utilities
    vim \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Verify GDAL version (should be 3.10.x on Ubuntu 25)
RUN gdalinfo --version

# Install compression libraries for Zarr/blosc support
RUN apt-get update && apt-get install -y \
    # Compression libraries that rasterio needs
    libblosc1 \
    libblosc-dev \
    python3-blosc \
    # Additional compression support
    liblz4-1 \
    liblz4-dev \
    libzstd1 \
    libzstd-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages using system pip to ensure compatibility with system GDAL
RUN python3 -m pip install --no-cache-dir --break-system-packages \
    GDAL==$(gdal-config --version) \
    # Install compression codecs FIRST
    blosc \
    numcodecs \
    # Then install geospatial packages
    xarray \
    zarr==2.18.* \
    dask \
    geopandas \
    # IMPORTANT: Install rasterio without binary to force compilation against system GDAL
    --no-binary=rasterio rasterio \
    rioxarray \
    fiona \
    shapely \
    pyproj \
    netcdf4 \
    h5py \
    scipy \
    matplotlib \
    cartopy \
    ipykernel \
    ipywidgets \
    jupyterlab \
    notebook

# Create directories for EOPF-Zarr driver
RUN mkdir -p /opt/eopf-zarr/drivers \
    && mkdir -p /opt/eopf-zarr/build

# Clone EOPF-Zarr driver from main repository
WORKDIR /opt/eopf-zarr
RUN git clone https://github.com/EOPF-Sample-Service/GDAL-ZARR-EOPF.git source

# Build EOPF-Zarr driver from main repository source
WORKDIR /opt/eopf-zarr/build
RUN cmake ../source \
        -DCMAKE_BUILD_TYPE=Release \
        -DGDAL_ROOT=/usr \
        -DGDAL_INCLUDE_DIR=/usr/include/gdal \
        -DGDAL_LIBRARY=/usr/lib/x86_64-linux-gnu/libgdal.so \
    && make -j$(nproc) gdal_EOPFZarr \
    && echo "Build completed. Files in build directory:" \
    && ls -la \
    && echo "Copying driver to drivers directory:" \
    && cp gdal_EOPFZarr.so /opt/eopf-zarr/drivers/ \
    && echo "Driver installed successfully:" \
    && ls -la /opt/eopf-zarr/drivers/

# Clean up source code to reduce image size (optional)
RUN rm -rf /opt/eopf-zarr/source/.git \
    && rm -rf /opt/eopf-zarr/source/build \
    && rm -rf /opt/eopf-zarr/source/notebooks \
    && rm -rf /opt/eopf-zarr/source/docs

# Verify driver installation
RUN ls -la /opt/eopf-zarr/drivers/ \
    && echo "GDAL_DRIVER_PATH=/opt/eopf-zarr/drivers" >> /etc/environment

# Install additional JupyterHub packages for compatibility
RUN python3 -m pip install --no-cache-dir --break-system-packages \
    jupyterhub \
    notebook \
    jupyterlab \
    ipywidgets

# Create a non-root user for JupyterHub
RUN useradd -m -s /bin/bash jupyter \
    && echo "jupyter:jupyter" | chpasswd

# Create jupyter workspace directory
RUN mkdir -p /home/jupyter/work \
    && chown -R jupyter:jupyter /home/jupyter

# Copy docker entrypoint and test scripts (these will be in the Docker repo)
COPY docker-entrypoint.sh /usr/local/bin/
COPY test-environment.py /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh \
    && chmod +x /usr/local/bin/test-environment.py

# Create test notebooks directory and copy example notebooks
RUN mkdir -p /home/jupyter/work/notebooks

# Copy example notebooks from Docker repo (not main repo)
COPY notebooks/ /home/jupyter/work/notebooks/

# Fix ownership
RUN chown -R jupyter:jupyter /home/jupyter/work/

# Switch to non-root user
USER jupyter
WORKDIR /home/jupyter

# Expose JupyterLab port
EXPOSE 8888

# Default command
CMD ["/usr/local/bin/docker-entrypoint.sh"]
